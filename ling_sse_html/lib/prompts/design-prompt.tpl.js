export default `# 设计规范

你使用tailwindcss来设计你的简历,以下是你的主题，你可以直接使用。
@theme {
    --color-primary: #2563EB; /* 深蓝主色 */
    --color-secondary: #6366F1; /* 静谧紫色 */
    --color-background: #FFFFFF; /* 白色背景 */
    --color-cardMain: #F3F4F6; /* 主卡片背景，浅灰色 */
    --color-cardSub: #F9FAFB; /* 副卡片背景，更浅灰 */
    --color-textPrimary: #111827; /* 几乎黑色的正文 */
    --color-textSecondary: #6B7280; /* 中性灰色副标题 */
    --font-sans: Inter, sans-serif;
    --spacing-18: 4.5rem;
    --spacing-22: 5.5rem;
    --border-radius-xl: 1rem;
    --shadow-card: 0 4px 12px rgba(0,0,0,0.06);
}

## 视觉风格
尽量遵循 Material Design 的设计规范，确保UI具有良好的层次感、清晰的阴影效果和一致的圆角处理：

层次感 ：使用适当的阴影和分层来体现不同元素的层级结构。利用 TailwindCSS 提供的阴影类（例如 shadow-sm , shadow , shadow-lg ）来表示不同程度的海拔高度，使重要元素凸显而不显得突兀。阴影的运用应与 Material Design 指南一致，比如卡片使用轻微阴影而浮动操作按钮 (FAB) 使用稍大的阴影，以营造悬浮感。

圆角 ：组件边角应当采用圆角造型，避免生硬的直角。适度的圆角使界面元素看起来柔和且有亲和力，并保持设计的一致性。确保所有组件的圆角半径统一，形成和谐的视觉风格。

颜色一致性 ：采用 Material Design 规定的颜色搭配方案，突出界面中的主次元素。主要颜色（Primary）用于强调应用的主要品牌色或关键动作，次要颜色（Secondary）用于辅助性的高亮或区分元素。背景色和表面色应保持中性色调以突出内容，错误色（Error）用于表示错误状态或警告。确保颜色使用和搭配遵循统一规范，避免过多随意的色彩组合。

主题支持

确保组件同时支持浅色模式和深色模式，以提供更佳的用户体验。使用 TailwindCSS 的工具轻松管理两种主题下的样式差异：

暗色模式变体 ：利用 TailwindCSS 的 dark: 前缀为深色模式指定不同的样式​。例如，一个卡片容器可以在正常模式使用浅色背景（如 bg-white ），在深色模式下通过添加 dark:bg-gray-800 来使用深色背景。TailwindCSS 默认通过 CSS 媒体特性 prefers-color-scheme 来检测用户偏好的主题。如果需要，也可以自行切换 dark 类来强制启用暗色样式。

主题色方案 ：定义应用的主题色调，包括 Primary , Secondary , Background , Surface , Error 等关键色彩​。在浅色和深色模式下，这些主题色可能需要使用不同的色值以确保对比度。使用语义化的 TailwindCSS 类名来引用它们，例如 text-primary （文字使用主色）、 bg-secondary （背景使用次色），以及在暗色模式下对应的 dark:text-primary 、 dark:bg-secondary 等。这样可以保证不同模式下颜色切换的一致性。

一致的风格 ：无论处于何种主题，组件的风格应保持一致的品牌识别度和可用性。确保在深色模式下，文字和图标相对于背景有足够的对比度（例如深色背景上使用浅色文字）；在浅色模式下避免过亮的颜色造成视觉刺眼。所有状态（如悬停、禁用）在两种模式下都应经过精心调整，以符合 Material Design 对深色主题的规范和可访问性要求。

## 间距与尺寸

使用统一的间距体系和尺寸规范，使界面元素对齐整齐并符合 Material Design 的布局要求：

4px 网格基准 ：采用4的倍数作为空间单位，以匹配 Material Design 的8dp推荐间距​。常用的值包括4px、8px、16px、24px等，用于内边距和外边距都能保持一致的节奏。通过 TailwindCSS 的间距工具类（例如 p-1 表示4px 内边距， p-2 表示8px，以此类推）来准确控制组件的内外边距，从而确保不同组件间的留白一致。

尺寸规范 ：组件的高度和宽度也应当遵循相同的4px增量原则。例如，按钮的高度可以设置为32px（8的倍数），大型容器的内边距可以是24px等。统一的尺寸规范有助于在布局中实现良好的对齐和视觉平衡，提高设计的一致性。

边框和圆角 ：Material Design 通常使用略微圆润的矩形。推荐在组件上使用 TailwindCSS 的圆角类如 rounded-md （中等圆角）或 rounded-lg （大圆角）来实现这一效果。对于卡片、对话框等容器组件，可选择略大的圆角，而对于按钮等小型元素，则可使用中等圆角，让界面元素在视觉上更柔和且保持统一。

## 交互与动画

为组件添加明确的交互反馈和流畅的动画效果，提升用户体验：

悬停状态 ：当用户将鼠标悬停在可交互元素上时，提供视觉提示。例如按钮在 hover 时稍微改变背景颜色或增加阴影，以表明该元素可点击。使用 TailwindCSS 的悬停变体类（如 hover:bg-gray-100 或 dark:hover:bg-gray-700 ）改变背景，配合 hover:shadow-md 增强阴影，通过这些反馈让用户清楚哪些元素是可交互的。

焦点状态 ：当元素（尤其是输入框）获得焦点时，应突显边框或阴影，方便键盘和辅助技术用户辨识当前焦点所在。可使用 TailwindCSS 的焦点变体类，例如 focus:outline-none 移除默认焦点样式，并添加 focus:ring-2 focus:ring-primary focus:ring-opacity-50 来给元素外层绘制主题色高亮边框（即焦点光环）。这样在不破坏布局的前提下强调了焦点元素。

激活/按下状态 ：在用户按下按钮等元素时，提供即时的样式变化反馈。可以在按下时降低亮度或加深组件颜色，或者使用内部阴影模拟按压效果。TailwindCSS 提供了 active: 前缀的类，例如 active:bg-gray-200 或 active:shadow-inner ，可用于定义元素被按住时的样式，通过按下态让用户清晰感知到点击已触发。

过渡动画 ：上述所有状态变化应该使用平滑的过渡动画，使交互感觉自然。通过 TailwindCSS 的过渡类如 transition 搭配 duration-200 或 duration-300 以及 ease-in-out ，让样式改变在约200–300毫秒内渐进发生。当背景颜色、阴影等发生变化时，会呈现平滑的过渡效果，提升界面的精致度和专业感。

TailwindCSS 使用规范

充分利用 TailwindCSS 的实用类库，保持代码整洁一致，并方便地适应主题变化：

语义化的样式类 ：在 TailwindCSS 中定义应用的主题色和尺寸刻度，使其拥有语义化的类名。例如，通过 Tailwind 配置定义 primary 和 secondary 颜色，这样就可以使用 bg-primary , text-primary 等类名来代替直接使用具体颜色值。这有助于强调颜色的语义角色，也方便日后统一调整主题。深色模式下可以相应定义 primary-dark 等颜色，并使用 dark:bg-primary-dark 实现模式切换时的样式变化。

实用工具类优先 ：编写样式时优先使用 TailwindCSS 提供的实用工具类，而非编写新的自定义 CSS。例如，使用 flex 或 grid 实现布局，使用 p-* / m-* 类控制间距，使用 text-* 类设置文字样式，使用 shadow-* 和 rounded-* 类实现阴影和圆角等。通过组合这些类，可以快速搭建符合设计规范的组件样式，并保证不同组件之间风格一致。只有当某些特殊样式无法通过现有工具类实现时，才考虑编写自定义样式或使用 @apply 提取公共样式。

统一管理 ：利用 TailwindCSS 配置集中管理设计系统参数，如颜色调色板、间距尺度和圆角半径等，使其全局生效。这样，当所有组件引用 primary 颜色或 xl 间距时，实际使用的是同一套配置值，方便在需要时调整整体风格而不必修改各个组件代码。这种做法保证了样式的全局一致性和代码的可维护性。

## 组件状态和复用性

在设计组件时，考虑各种使用状态，并确保代码的模块化以便复用：

禁用状态 ：为按钮、表单控件等提供禁用状态样式。禁用时组件应呈现“不可用”的视觉效果，例如降低不透明度（TailwindCSS 类如 opacity-50 ），改变文字颜色为中性色，并移除交互反馈（如悬停下的高亮）。同时，可应用 cursor-not-allowed 来改变鼠标指针样式，并通过 disabled: 变体确保在禁用状态下不触发悬停或焦点效果。

加载状态 ：对于触发异步操作的组件（如提交按钮），应提供加载中的反馈。在加载状态下，组件通常呈现为禁用样式并显示加载指示器。例如，按钮内可以插入一个小型的 spinner 图标，并使用 animate-spin 类使其旋转，提示用户操作正在进行。加载期间应暂时禁止用户再次交互（通过 disabled 属性或相应状态控制），以防止重复提交。

错误状态 ：当组件需要表示错误（例如表单验证失败），应使用显著的错误样式予以反馈。包括将边框或文字变为错误红色，以及显示错误消息。可以在 TailwindCSS 配置中定义 error 颜色，并使用诸如 border-error 、 text-error 的类，或直接使用预设的红色类如 border-red-500 、 text-red-600 来突出错误状态。确保错误提示文字清晰可辨，并满足无障碍对比度要求。

模块化与复用 ：编写组件代码时注重模块化设计，方便在不同项目或场景下复用。一方面，将通用的样式提取为可重用的组件或样式片段（例如创建一个基础 Button 组件，统一处理上述各种状态和样式，然后在不同场景下复用）。另一方面，利用 TailwindCSS 的 @apply 指令在自定义样式表中封装一组常用的实用类，赋予其语义化的类名，从而减少模板中重复的类名书写。这种模块化策略使代码更简洁，样式更易维护，同时保证各组件遵循统一的设计规范。
`;